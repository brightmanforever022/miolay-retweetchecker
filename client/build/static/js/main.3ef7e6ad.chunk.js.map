{"version":3,"sources":["logo.svg","components/Header/index.js","components/Footer.js","components/Loader/index.js","actions/types.js","actions/index.js","components/Searchbar/index.js","components/DoughnutChart/DoughnutChart.js","components/Tweet/index.js","components/RecentList/index.js","components/Report/index.js","components/TeaserBlock/index.js","components/Home/index.js","components/Status/index.js","components/Login/index.js","components/Login/loginCallback.js","components/Logout/index.js","components/About/index.js","components/Contact/index.js","components/Sitemap/index.js","reducers/recent_reducer.js","reducers/retweets_reducer.js","reducers/sitemap_reducer.js","reducers/index.js","reducers/auth_reducer.js","reducers/profile_reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","state","activeNavItem","showDropdown","toggleDropdown","e","preventDefault","_this","setState","path","document","location","href","indexOf","this","userControls","react_default","a","createElement","className","props","loggedIn","dropdown","onClick","src","image","alt","username","logo","Component","connect","auth","authenticated","footer","loader","AUTH_USER","UNAUTH_USER","REDIRECT_USER","FETCH_PROFILE","FETCH_RECENT","REFRESH_TWEET","FETCH_SITEMAP","FETCH_SEARCH","ROOT_URL","searchTwitter","value","tokens","localStorage","getItem","user_name","dispatch","axios","post","concat","check","refresh","then","response","type","payload","data","catch","error","changeDateFormat","dateTimeString","splitDateTimeString","Date","toLocaleString","year","month","day","hour","minute","toLowerCase","split","splitTimeString","substr","Searchbar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputKeypress","event","key","handleFormSearch","target","searchValue","setSearchValue","isSearching","errorMessage","bind","assertThisInitialized","nextProps","recent","components_Loader","placeholder","onKeyPress","onChange","DoughnutChart","chart","ctx","getElementById","id","getContext","Chart","labels","datasets","label","real","suspicious","bots","backgroundColor","options","legend","display","update","data-real","data-suspicious","data-bots","width","height","Tweet","financial","x","Number","parseFloat","toFixed","formatCount","count","handleRefresh","refreshTwitter","retweetId","realCount","suspiciousCount","token","refreshButton","aria-hidden","i","retweeters","analysis","classification","realPercent","parseInt","length","suspiciousPercent","botsPercent","adjective","predominantClass","suspiciousClass","resultClasses","resultIcon","tweetAnalysis","analysisLink","showFull","inRecent","window","history","pushState","join","components_DoughnutChart_DoughnutChart","analysisBoxClasses","chevron","expanded","tweetClasses","push","avatar","name","rel","tweetDate","content","countRetweets","countLikes","searchDate","RecentList","fetchRecent","loading","recentList","tweetsJSX","components_Tweet","assign","get","forEach","element","temp","checkType","result","tweet","user","screenName","profileImageUrl","date","updatedAt","counts","retweets","likes","adverb","probabilityMatrix","Report","reformatDateString","str","lengthenIntFromAbbrString","toString","replace","analyzeRetweeters","tweetData","realRetweeterFollowerCounts","majorityPercentage","percentages","_total_analyzed","_suspicious_total","_suspicious_mass_retweeters","_suspicious_mass_followers","_suspicious_account","_real_total","_real_influencers","_real_regular","_bots_total","_bots_activity","_bots_account","_bots_account_and_activity","followedBy","justification","slug","classes","pop","Math","round","avg","sum","z","estimates","realRetweeterAverageFollowerCount","generateEstimatesViaAnalysis","userProbablityMatrix","actualFollowerCount","estimatedFollowerCount","actualRetweetersCount","actualRetweetersReach","estimatedRetweetersCount","estimatedRetweetersReach","_actualQualityReachWithFakes","_estimatedQualityReach","retweetersJSX","searchResult","totalLength","realRegularCount","realInfluencerCount","highRetweetRatio","highFollowerRatio","highThreatLevel","botsAccount","botsActivity","accountAndActivity","linkClasses","title","reportText","floor","TeaserBlock","searchTerm","Home","share_fb","tweetValue","url","open","share_twitter","getAdjective","_this2","searchResults","hasRecentRetweeters","keyValue","tweetItem","objectSpread","components_Report","reportData","components_TeaserBlock","components_Header","components_Searchbar","components_RecentList","Footer","Status","isGetting","searchText","match","params","search","noData","class","Login","signinUser","style","color","redirect","Route","component","setItem","session","twitterRequestTokenKey","twitterRequestTokenSecret","signCallbackHandling","Redirect","to","twitterUser","screen_name","Logout","signoutUser","headers","authorization","removeItem","About","Contact","Sitemap","fetchSitemap","sitemapText","sitemap","initState","rootReducer","combineReducers","form","formReducer","arguments","undefined","action","profile","_action$payload","addedRecent","newRecentList","Array","isArray","item","tempRecent","newRecent","searchType","toConsumableArray","_action$payload2","dateString","store","applyMiddleware","reduxThunk","createStore","createStoreWithMiddleware","reducers","ReactDOM","render","es","BrowserRouter","Switch","exact","LoginCallback"],"mappings":"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","file":"static/js/main.3ef7e6ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bb636e04.svg\";","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport logo from '../../logo.svg'\r\n\r\nclass Header extends Component {\r\n\r\n  state = {\r\n    activeNavItem: 'checker',\r\n    //loggedIn: true,\r\n    showDropdown: false\r\n  }\r\n  \r\n  componentDidMount() {\r\n    const path = document.location.href\r\n    if (path.indexOf('about') !== -1) {\r\n      this.setState({activeNavItem: 'about'})\r\n    } else if (path.indexOf('contact') !== -1) {\r\n      this.setState({activeNavItem: 'contact'})\r\n    } else {\r\n      this.setState({activeNavItem: 'checker'})\r\n    }\r\n  }\r\n  \r\n  toggleDropdown = (e) => {\r\n    e.preventDefault()\r\n    this.setState({showDropdown: !this.state.showDropdown})\r\n  }\r\n\r\n  render(){\r\n    // Navigation Active Item Selection\r\n    /*\r\n    const asterisk = <span className=\"asterisk\">&#42;</span>;\r\n    const liClassesChecker = 'nav-item' + (this.state.activeNavItem === 'checker' ? ' active':'');\r\n    const liClassesAbout = 'nav-item' + (this.state.activeNavItem === 'about' ? ' active':'');\r\n    const liClassesContact = 'nav-item' + (this.state.activeNavItem === 'contact' ? ' active':'');\r\n    const asterisks = {\r\n      checker : (this.state.activeNavItem === 'checker' ? asterisk : null),\r\n      about : (this.state.activeNavItem === 'about' ? asterisk : null),\r\n      contact : (this.state.activeNavItem === 'contact' ? asterisk : null)\r\n    };\r\n    */\r\n    // Login / User Dropdown\r\n    let userControls = <a href=\"/login\" className=\"login-btn\">Login</a>\r\n    if(this.props.loggedIn) {\r\n      const dropdown = this.state.showDropdown ? (<ul className=\"dropdown\">\r\n        <li><a href=\"/settings\"><i className=\"fas fa-cog\"></i> Settings</a></li>\r\n        <li><a href=\"/logout\"><i className=\"fas fa-sign-out-alt\"></i> Logout</a></li>\r\n      </ul>) : null\r\n      userControls = (\r\n        <div>\r\n          <button className=\"btn-dropdown\" onClick={this.toggleDropdown}><img src={this.props.image} className=\"avatar\" alt=\"\" /> <span className=\"my-username\">@{this.props.username}</span></button>\r\n          {dropdown}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <header className=\"App-header row\">\r\n        <a href=\"/\"><img src={logo} className=\"App-logo col span-3-of-12\" alt=\"logo\" /></a>\r\n        <div className=\"col span-9-of-12 App-nav-holder\">\r\n          {/* <nav className=\"App-nav\">\r\n            <ul>\r\n              <li><a href=\"/\" className={liClassesChecker}>Checker{asterisks['checker']}</a></li>\r\n              <li><a href=\"/about\" className={liClassesAbout}>About{asterisks['about']}</a></li>\r\n              <li><a href=\"/contact\" className={liClassesContact}>Contact{asterisks['contact']}</a></li>\r\n            </ul>\r\n          </nav> */}\r\n          <div className=\"user-controls\">\r\n            {userControls}\r\n          </div>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n  return {\r\n    loggedIn: state.auth.authenticated,\r\n    username: state.auth.username,\r\n    image: state.auth.image\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header)\r\n","import React from 'react'\r\n\r\nconst footer = props => {\r\n  return (\r\n    <footer className=\"App-footer\">\r\n      &copy; 2019 - Tweet Checker - All Rights Reserved. This website is in no way affiliated with Twitter.\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default footer","import React from 'react'\r\nimport './Loader.scss'\r\n\r\nconst loader = (props) => {\r\n  \r\n  return (\r\n    <div className=\"loading row\">\r\n      <div className=\"ballwrap\">\r\n        <div className=\"ball\"></div>\r\n        <div className=\"ball\"></div>\r\n        <div className=\"ball\"></div>\r\n        <div className=\"ball\"></div>\r\n        <div className=\"ball\"></div>\r\n        <div className=\"ball\"></div>\r\n        <div className=\"ball\"></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default loader\r\n","export const AUTH_USER = 'auth_user'\r\nexport const UNAUTH_USER = 'unauth_user'\r\nexport const REDIRECT_USER = 'redirect_user'\r\n\r\nexport const FETCH_PROFILE = 'fetch_profile'\r\nexport const FETCH_RECENT = 'fetch_recent'\r\nexport const REFRESH_TWEET = 'refresh_tweet'\r\nexport const FETCH_SITEMAP = 'fetch_sitemap'\r\n\r\nexport const FETCH_RETWEETS = 'fetch_retweets'\r\n\r\nexport const FETCH_SEARCH = 'fetch_search'","import axios from 'axios'\r\nimport {\r\n  AUTH_USER,\r\n  REDIRECT_USER,\r\n  UNAUTH_USER,\r\n  FETCH_PROFILE,\r\n  FETCH_RECENT,\r\n  FETCH_RETWEETS,\r\n  FETCH_SEARCH,\r\n  REFRESH_TWEET,\r\n  FETCH_SITEMAP\r\n} from './types'\r\n\r\n// const ROOT_URL = 'http://127.0.0.1:8888/api'\r\nconst ROOT_URL = '/api'\r\n\r\n/**\r\n * Authentication\r\n */\r\n\r\nexport function signinUser() {\r\n\r\n  // Using redux-thunk (instead of returning an object, return a function)\r\n  // All redux-thunk doing is giving us arbitrary access to the dispatch function, and allow us to dispatch our own actions at any time we want\r\n  return function(dispatch) {\r\n\r\n    // Submit email/password to the server\r\n    axios.get(`${ROOT_URL}/login`)  // axios returns a promise\r\n      .then(response => {  // If request is good (sign in succeeded) ...\r\n        const {data} = response\r\n        // - Save the JWT token (use local storage)\r\n        localStorage.setItem('token',data.session.twitterRequestTokenKey)\r\n        localStorage.setItem('twitterRequestTokenKey',data.session.twitterRequestTokenKey)\r\n        localStorage.setItem('twitterRequestTokenSecret',data.session.twitterRequestTokenSecret)\r\n\r\n        dispatch({\r\n          type: REDIRECT_USER,\r\n          payload: data.redirect,\r\n        })\r\n      })\r\n      .catch(() => {  // If request is bad (sign in failed) ...\r\n\r\n        // - Redirect (REPLACE) to the route '/signin', then show an error to the user\r\n        /*historyReplace('/login', {\r\n          time: new Date().toLocaleString(),\r\n          message: 'Authentication failed'\r\n        })*/\r\n      })\r\n  }\r\n}\r\n\r\nexport function signCallbackHandling(tokens) {\r\n  return function(dispatch) {\r\n    const twitterRequestTokenKey = localStorage.getItem('twitterRequestTokenKey')\r\n    const twitterRequestTokenSecret = localStorage.getItem('twitterRequestTokenSecret')\r\n    localStorage.setItem('rtc-token', tokens)\r\n    axios.get(`${ROOT_URL}/login/callback${tokens}`,{params: {\r\n      twitterRequestTokenKey,\r\n      twitterRequestTokenSecret\r\n    }})\r\n    .then(result=>{\r\n      const {data} = result\r\n      localStorage.setItem('user_avatar',data.twitterUser.avatar)\r\n      localStorage.setItem('user_name',data.twitterUser.screen_name)\r\n      if (data.twitterUser.screen_name.length > 0) {\r\n        dispatch({\r\n          type: AUTH_USER,\r\n          payload: {username:data.twitterUser.screen_name, image: data.twitterUser.avatar},\r\n        })\r\n      } else {\r\n        dispatch({\r\n          type: UNAUTH_USER,\r\n          payload: null,\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function signupUser({ email, password, firstName, lastName }, historyPush, historyReplace) {\r\n\r\n  return function(dispatch) {\r\n\r\n    axios.post(`${ROOT_URL}/signup`, { email, password, firstName, lastName })  // axios returns a promise\r\n      .then(response => {  // If request is good (sign up succeeded) ...\r\n\r\n        // - Redirect (PUSH) to the route '/signin', then show a success message to the user\r\n        historyPush('/signin', { time: new Date().toLocaleString(), message: response.data.message })\r\n      })\r\n      .catch(({response}) => {  // If request is bad (sign up failed) ...\r\n\r\n        // - Redirect (REPLACE) to the route '/signup', then show an error to the user\r\n        historyReplace('/signup', { time: new Date().toLocaleString(), message: response.data.message })\r\n      })\r\n  }\r\n}\r\n\r\nexport function signoutUser() {\r\n\r\n  return function(dispatch) {\r\n    axios.get(`${ROOT_URL}/logout`, {\r\n      headers: { authorization: localStorage.getItem('token') }\r\n    }).then(response => {\r\n      // - Delete the JWT token from local storage\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('rtc-token')\r\n      localStorage.removeItem('twitterRequestTokenKey')\r\n      localStorage.removeItem('twitterRequestTokenSecret')\r\n      localStorage.removeItem('user_avatar')\r\n      localStorage.removeItem('user_name')\r\n      \r\n      dispatch({\r\n        type: UNAUTH_USER,\r\n        payload: null,\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * User information\r\n */\r\n\r\nexport function fetchProfile() {\r\n\r\n  return function(dispatch) {\r\n    axios.post(`${ROOT_URL}/profile`, {\r\n      headers: { authorization: localStorage.getItem('token') }\r\n    }).then(response => {\r\n      dispatch({\r\n        type: FETCH_PROFILE,\r\n        payload: response.data.user,\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport function fetchRetweets(id) {\r\n\r\n  return function(dispatch) {\r\n    axios.post(`${ROOT_URL}/status/${id}`).then(response => {\r\n      dispatch({\r\n        type: FETCH_RETWEETS,\r\n        payload: response.data,\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Blog Post\r\n */\r\n\r\nexport function fetchRecent() {\r\n\r\n  return function(dispatch) {\r\n    axios.get(`${ROOT_URL}/recent`).then((response) => {\r\n      let recentList = []\r\n      response.data.forEach(element => {\r\n        let temp = {}\r\n        if (element.type === 'user') {\r\n          temp = {\r\n            showFull: element.checkType==='full'?true:false,\r\n            name: element.result.tweet.user.name,\r\n            username: element.result.tweet.user.screenName,\r\n            avatar: element.result.tweet.user.profileImageUrl,\r\n            tweetDate: element.result.tweet.date,\r\n            searchDate: changeDateFormat(element.result.updatedAt),\r\n            content: element.result.tweet.content,\r\n            countRetweets: element.result.tweet.counts.retweets,\r\n            countLikes: element.result.tweet.counts.likes,\r\n            adverb: 'mostly',\r\n            adjective: element.result.probabilityMatrix.analysis.classification,\r\n            retweetId: element.result.retweetId,\r\n            retweeters: element.result.retweeters,\r\n            type: 'user'\r\n          }\r\n        } else {\r\n          temp = {\r\n            showFull: element.checkType==='full'?true:false,\r\n            name: element.result.tweet.user.name,\r\n            username: element.result.tweet.user.screenName,\r\n            avatar: element.result.tweet.user.profileImageUrl,\r\n            tweetDate: element.result.tweet.date,\r\n            searchDate: changeDateFormat(element.result.updatedAt),\r\n            content: element.result.tweet.content,\r\n            countRetweets: element.result.tweet.counts.retweets,\r\n            countLikes: element.result.tweet.counts.likes,\r\n            adverb: 'mostly',\r\n            adjective: '',\r\n            retweetId: element.result.retweetId,\r\n            retweeters: element.result.retweeters,\r\n            type: 'tweet'\r\n          }\r\n        }\r\n        recentList.push(temp)\r\n      })\r\n      dispatch({\r\n        type: FETCH_RECENT,\r\n        payload: recentList,\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport function searchTwitter(value) {\r\n  let tokens = localStorage.getItem('rtc-token') ? localStorage.getItem('rtc-token') : ''\r\n  const user_name = localStorage.getItem('user_name') ? localStorage.getItem('user_name') : ''\r\n  return function(dispatch) {\r\n    axios.post(`${ROOT_URL}/fullChecker${tokens}`,\r\n      { check: value, user_name: user_name, refresh: 0 }\r\n    ).then(response => {\r\n      dispatch({\r\n        type: FETCH_SEARCH,\r\n        payload: response.data,\r\n      })\r\n    }).catch(error => {\r\n      dispatch({\r\n        type: FETCH_SEARCH,\r\n        payload: {error: error},\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport function refreshTwitter(value) {\r\n  let tokens = localStorage.getItem('rtc-token') ? localStorage.getItem('rtc-token') : ''\r\n  const user_name = localStorage.getItem('user_name') ? localStorage.getItem('user_name') : ''\r\n  return function(dispatch) {\r\n    axios.post(`${ROOT_URL}/fullChecker${tokens}`,\r\n      { check: value, user_name: user_name, refresh: 1 }\r\n    ).then(response => {\r\n      dispatch({\r\n        type: REFRESH_TWEET,\r\n        payload: response.data,\r\n      })\r\n    }).catch(error => {\r\n      dispatch({\r\n        type: REFRESH_TWEET,\r\n        payload: {error: error},\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport function fetchSitemap() {\r\n  return function(dispatch) {\r\n    axios.get(`${ROOT_URL}/sitemap`).then(response => {\r\n      dispatch({\r\n        type: FETCH_SITEMAP,\r\n        payload: response.data,\r\n      })\r\n    }).catch(error => {\r\n      dispatch({\r\n        type: FETCH_SITEMAP,\r\n        payload: {error: error}\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nfunction changeDateFormat(dateTimeString) {\r\n  let originalDateTime = new Date(dateTimeString)\r\n  const dateTimeOptions = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' }\r\n  const splitDateTimeString = originalDateTime.toLocaleString('en-US', dateTimeOptions).toLowerCase().split(', ')\r\n  const splitTimeString = splitDateTimeString[1].split(' ')\r\n  return splitDateTimeString[0] + ' @ ' + splitTimeString[0].substr(0, 5) + ' ' + splitTimeString[1]\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport Loader from '../Loader'\r\nimport { searchTwitter } from '../../actions/index'\r\n\r\nclass Searchbar extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      isSearching: false,\r\n      errorMessage: '',\r\n      searchValue: ''\r\n    }\r\n\r\n    this.handleFormSearch = this.handleFormSearch.bind(this)\r\n  }\r\n\r\n  inputKeypress = (event) => {\r\n    if (event.key === 'Enter') {\r\n       this.handleFormSearch(event)\r\n       event.target.value = ''\r\n    } else {\r\n      let searchValue = event.target.value + event.key\r\n      this.setState({ searchValue: searchValue })\r\n    }\r\n  }\r\n\r\n  setSearchValue = (event) => {\r\n    let searchValue = event.key?event.target.value + event.key:event.target.value\r\n    this.setState({ searchValue: searchValue })\r\n  }\r\n\r\n  handleFormSearch(e) {\r\n    let searchValue = this.state.searchValue\r\n    if (searchValue !== '') {\r\n      if (searchValue.indexOf('status/') !== -1) {\r\n        this.setState({ isSearching: true, errorMessage: '', searchValue: ''})\r\n        this.props.searchTwitter(searchValue)\r\n      } else {\r\n        this.setState({ errorMessage: 'We support only searching of retweet' })\r\n      }\r\n    }else {\r\n      this.setState({ errorMessage: 'Must enter valid search terms' })\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    const { recent } = nextProps\r\n    if (recent.error) {\r\n      this.setState({ isSearching: false, errorMessage: 'Sorry, looks like that tweet doesn\\'t exist' })\r\n    } else {\r\n      this.setState({ isSearching: false })\r\n    }\r\n  }\r\n\r\n  render(){\r\n    let loader = this.state.isSearching ? <Loader /> : null\r\n    return (\r\n      <div className=\"search-container\">\r\n        <div className=\"row\">\r\n          <div className=\"input-field col span-9-of-12\">\r\n            {/*<span className=\"at-symbol\">&#64;</span>*/}\r\n            { loader }\r\n            <input type=\"text\" placeholder=\"Enter the link to the tweet you want to checked\" onKeyPress={this.inputKeypress} onChange={this.setSearchValue} />\r\n          </div>\r\n          <button className=\"col span-3-of-12\" onClick={this.handleFormSearch}><span className=\"icon\"></span> Check</button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"error-message col span-9-of-12\">{this.state.errorMessage}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { recent: state.recent }\r\n}\r\n\r\nexport default connect(mapStateToProps, { searchTwitter })(Searchbar)\r\n","import React, { Component } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\nclass DoughnutChart extends Component {\r\n  chart = null\r\n\r\n  componentDidMount(){\r\n    const ctx = document.getElementById(this.props.id).getContext('2d')\r\n\r\n    this.chart = new Chart(ctx, {\r\n      type: 'doughnut',\r\n      data: {\r\n        labels: [\"Real People\", \"Suspicious Users\", \"Bots\"],\r\n        datasets: [{\r\n          label: '# of Votes',\r\n          data: [this.props.real, this.props.suspicious, this.props.bots],\r\n          backgroundColor: [\r\n            'rgb(54, 162, 235)',\r\n            'rgb(252, 200, 27)',\r\n            'rgb(255, 99, 132)'\r\n          ]\r\n        }]\r\n      },\r\n      options: {\r\n        legend: {display: false},\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.chart.data.datasets[0].data = [nextProps.real, nextProps.suspicious, nextProps.bots]\r\n    this.chart.update()\r\n  }\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div className=\"doughnut-chart\">\r\n        <canvas\r\n          id={this.props.id}\r\n          data-real={this.props.real}\r\n          data-suspicious={this.props.suspicious}\r\n          data-bots={this.props.bots}\r\n          width=\"400\"\r\n          height=\"400\"\r\n        >\r\n        </canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DoughnutChart\r\n","import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport Loader from '../Loader'\r\nimport { refreshTwitter } from '../../actions/index'\r\n\r\nimport DoughnutChart from '../DoughnutChart/DoughnutChart'\r\n\r\nclass Tweet extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      isSearching: false\r\n    }\r\n\r\n    this.handleRefresh = this.handleRefresh.bind(this)\r\n  }\r\n  handleRefresh () {\r\n    this.props.refreshTwitter('/status/' + this.props.retweetId)\r\n    this.setState({isSearching: true})\r\n  };\r\n  financial = (x) => {\r\n    return Number.parseFloat(x).toFixed(0)\r\n  }\r\n  formatCount = (count) => {\r\n    if (count >= 1000000) {\r\n      return (count / 1000000).toFixed(1) + 'M'\r\n    } else if(count >= 1000) {\r\n      return (count / 1000).toFixed(1) + 'k'\r\n    }\r\n    return count\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    this.setState({isSearching: false})\r\n  }\r\n\r\n  render () {\r\n    let realCount = 0\r\n    let suspiciousCount = 0\r\n    const token = localStorage.getItem('rtc-token')\r\n    let refreshButton = this.state.isSearching ? <Loader /> : (\r\n      <i className=\"fa fa-sync\" aria-hidden=\"true\"\r\n        onClick={this.handleRefresh}\r\n      ></i>\r\n    )\r\n    for (let i in this.props.retweeters) {\r\n      if (this.props.retweeters[i].analysis.classification === 'real') {\r\n        realCount++\r\n      } else if (this.props.retweeters[i].analysis.classification === 'suspicious') {\r\n        suspiciousCount++\r\n      }\r\n    }\r\n    let realPercent = parseInt(this.financial(realCount / this.props.retweeters.length * 100))\r\n    let suspiciousPercent = parseInt(this.financial(suspiciousCount / this.props.retweeters.length * 100))\r\n    if ((realPercent + suspiciousPercent) > 100) {\r\n      suspiciousPercent = 100 - realPercent\r\n    }\r\n    let botsPercent = 100 - realPercent - suspiciousPercent\r\n    let adverbText = 'mostly'\r\n    let adjective = ''\r\n    \r\n    // Define which percent is predominant. real or suspicious or bots ?\r\n    let predominantClass = ''\r\n    let suspiciousClass = ''\r\n    if (realPercent >= suspiciousPercent && realPercent >= botsPercent) {\r\n      predominantClass = 'real-color'\r\n      adjective = 'real'\r\n    } else if (suspiciousPercent >= realPercent && suspiciousPercent >= botsPercent) {\r\n      predominantClass = 'suspicious-color'\r\n      suspiciousClass = 'suspicious-text'\r\n      adjective = 'suspicious'\r\n    } else {\r\n      predominantClass = 'bots-color'\r\n      adjective = 'bots'\r\n    }\r\n    \r\n    let resultClasses = ['result-container', 'group', adjective]\r\n    let resultIcon = null\r\n    switch (adjective){\r\n      case 'real': \r\n        resultIcon = <i className=\"far fa-thumbs-up result-icon\" aria-hidden=\"true\"></i>\r\n        break\r\n      case 'suspicious':\r\n      case 'bots': \r\n        resultIcon = <i className=\"far fa-thumbs-down result-icon\" aria-hidden=\"true\"></i>\r\n        break\r\n      default: \r\n        resultIcon = null\r\n    }\r\n  \r\n    let tweetAnalysis = null\r\n    let analysisLink = ''\r\n    if (this.props.showFull) {\r\n      analysisLink = (\r\n        <a className=\"analysis-link\" href={'/status/' + this.props.retweetId} >View Report</a>\r\n      )\r\n      if (this.props.inRecent !== 'yes') {\r\n        refreshButton = null\r\n        // Change the url of browser\r\n        window.history.pushState(\"\", \"\", '/status/' + this.props.retweetId)\r\n      }\r\n    } else {\r\n      analysisLink = (\r\n        <a className=\"analysis-link full-width\" href=\"/login\" >View Report</a>\r\n      )\r\n    }\r\n\r\n    if (!token) {\r\n      refreshButton = null\r\n    }\r\n    \r\n    if (this.props.retweeters.length > 0 && this.props.showFull) {\r\n      tweetAnalysis = (\r\n        <div className=\"anal-inner\">\r\n          <h3>Full Retweet Analysis</h3>\r\n          <div className={resultClasses.join(' ')}>\r\n            <div className=\"chart-description\">\r\n              <span className=\"txt\">Retweets</span>\r\n              <span className={`percentage ${predominantClass}`}>{ realPercent }%</span>\r\n              <span className={`classification ${suspiciousClass}`}>{adjective}</span>\r\n            </div>\r\n            <DoughnutChart id={`tweet-${realPercent}-${this.props.id}-analysis-chart`} real={ realPercent } suspicious={ suspiciousPercent } bots={ botsPercent } />\r\n          </div>\r\n          {analysisLink}\r\n        </div>\r\n      )\r\n    } else {\r\n      tweetAnalysis = (\r\n        <div className=\"anal-inner\">\r\n          <h3>Quick Retweet Analysis</h3>\r\n          <div className={resultClasses.join(' ')}>\r\n            <span className=\"adverb\">{adverbText}</span>\r\n            <span className=\"adjective\">{adjective}</span>\r\n            {resultIcon}\r\n          </div>\r\n          {analysisLink}\r\n        </div>\r\n      )\r\n    }\r\n  \r\n    let analysisBoxClasses = ['analysis-box', 'col', 'span-4-of-12', (this.props.showFull?'full':'quick')]\r\n  \r\n    let chevron = this.props.expanded ? <i className=\"fas fa-chevron-down\"></i>:null\r\n  \r\n    let tweetClasses = ['entry', 'tweet', 'row']\r\n    if(this.props.expanded) tweetClasses.push('expanded')\r\n\r\n    return (\r\n      <div className={tweetClasses.join(' ')}>\r\n        <div className=\"tweet-content col span-8-of-12\">\r\n          <div className=\"avatar\">\r\n            <img src={this.props.avatar} alt=\"\" />\r\n          </div>\r\n          <div className=\"content\">\r\n            {chevron}\r\n            <div className=\"byline\">{this.props.name} <a href={`https://twitter.com/${this.props.username}`} className=\"username\" target=\"_blank\" rel=\"noopener noreferrer\">@{this.props.username}</a> <span className=\"date\">{this.props.tweetDate}</span></div>\r\n            <p className=\"tweet-txt\">{this.props.content}</p>\r\n            <div className=\"counts\">\r\n              <span className=\"retweets\">{this.formatCount(this.props.countRetweets)}</span>\r\n              <span className=\"likes\">{this.formatCount(this.props.countLikes)}</span>\r\n              <span className=\"refresh-btn\">\r\n                {refreshButton}\r\n              </span>\r\n              <span className=\"search-date\">{this.props.searchDate}</span>\r\n              {/* <span className=\"refresh-btn\"><i className=\"fa fa-sync\" aria-hidden=\"true\"></i></span> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={analysisBoxClasses.join(' ')}>\r\n          {tweetAnalysis}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { recent: state.recent }\r\n}\r\nexport default connect(mapStateToProps, { refreshTwitter })(Tweet)\r\n","import React, { Component } from 'react'\r\n// import { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { fetchRecent } from '../../actions/index'\r\nimport Loader from '../Loader'\r\n\r\nimport Tweet from '../Tweet'\r\n\r\nclass RecentList extends Component {\r\n\r\n  state = {\r\n    recent: [],\r\n    isSearching: true\r\n  };\r\n  componentDidMount() {\r\n    this.props.fetchRecent()\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const { recent } = nextProps\r\n    if (recent.loading === 'FETCH_RECENT' || recent.loading === 'FETCH_SEARCH') {\r\n      this.setState({ recent: recent.recentList, isSearching: false })\r\n    }\r\n  }\r\n\r\n  render(){\r\n    let loader = this.state.isSearching ? <Loader /> : null\r\n    let tweetsJSX = []\r\n    if(this.state.recent.length > 0) {\r\n      for ( let i in this.state.recent ) {\r\n\r\n        tweetsJSX.push(\r\n          <Tweet\r\n            key={i}\r\n            id={i}\r\n            inRecent=\"yes\"\r\n            { ...this.state.recent[i] }\r\n          />\r\n        )\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"recent-list\">\r\n        <h2>Recent Tweets Checked</h2>\r\n        { loader }\r\n        <div className=\"recent-entries\">\r\n          {tweetsJSX}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { recent: state.recent }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchRecent })(RecentList)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport DoughnutChart from '../DoughnutChart/DoughnutChart'\r\n\r\nclass Report extends Component {\r\n\r\n  financial = (x) => {\r\n    return Number.parseFloat(x).toFixed(0)\r\n  }\r\n\r\n  formatCount = (count) => {\r\n    if (count >= 1000000) {\r\n      return (count / 1000000).toFixed(1) + 'M'\r\n    } else if(count >= 1000) {\r\n      return (count / 1000).toFixed(1) + 'k'\r\n    }\r\n    return count\r\n  }\r\n  reformatDateString = (str) => {\r\n    var date = str.split('T')[0]\r\n    return date\r\n  }\r\n  lengthenIntFromAbbrString = function(str) {\r\n    str = str.toString()\r\n    switch (true) {\r\n      case str.indexOf('k') >= 0:\r\n        str = str.replace('k', '')\r\n        str = str * 1000\r\n        break\r\n      case str.indexOf('m') >= 0:\r\n        str = str.replace('m', '')\r\n        str = str * 1000000\r\n        break\r\n      case str.indexOf('b') >= 0:\r\n        str = str.replace('b', '')\r\n        str = str * 1000000000\r\n        break\r\n      default:\r\n        str = 0\r\n    }\r\n    return parseInt(str)\r\n  }\r\n\r\n  analyzeRetweeters = function(retweeters, tweetData) {\r\n    var realRetweeterFollowerCounts = []\r\n    var analysis = {\r\n      classification: null,\r\n      majorityPercentage: null,\r\n      percentages: {\r\n        real: null,\r\n        suspicious: null,\r\n        bots: null,\r\n      },\r\n      _total_analyzed: 0,\r\n      _suspicious_total: 0,\r\n      _suspicious_mass_retweeters: 0,\r\n      _suspicious_mass_followers: 0,\r\n      _suspicious_account: 0,\r\n      _real_total: 0,\r\n      _real_influencers : 0,\r\n      _real_regular: 0,\r\n      _bots_total: 0,\r\n      _bots_activity: 0,\r\n      _bots_account: 0,\r\n      _bots_account_and_activity: 0,\r\n    }\r\n\r\n    if (tweetData && typeof tweetData.counts !== 'undefined') {\r\n      analysis.counts = {\r\n        retweets: this.lengthenIntFromAbbrString(tweetData.counts.retweets),\r\n        likes: this.lengthenIntFromAbbrString(tweetData.counts.likes),\r\n      }\r\n    }\r\n\r\n    for ( var i in retweeters ) {\r\n      analysis._total_analyzed ++\r\n      if (retweeters[i].analysis.classification === 'real') {\r\n        analysis._real_total ++\r\n        realRetweeterFollowerCounts.push(retweeters[i].followedBy)\r\n        switch (retweeters[i].analysis.justification.slug) {\r\n          case 'influencer': analysis._real_influencers ++\r\n            break\r\n          case 'regular':\r\n          default: \r\n            analysis._real_regular ++\r\n        }\r\n      }\r\n      if (retweeters[i].analysis.classification === 'suspicious') {\r\n        analysis._suspicious_total ++\r\n        switch (retweeters[i].analysis.justification.slug) {\r\n          case 'highRetweetRatio': analysis._suspicious_mass_retweeters ++\r\n            break\r\n          case 'highFollowerRatio': analysis._suspicious_mass_followers ++\r\n            break\r\n          case 'highThreatLevel':\r\n          default: analysis._suspicious_account ++\r\n            break\r\n        }\r\n      }\r\n      if (retweeters[i].analysis.classification === 'bots') {\r\n        analysis._bots_total ++\r\n        switch (retweeters[i].analysis.justification.slug) {\r\n          case 'account': analysis._bots_account ++\r\n            break\r\n          case 'activity': analysis._bots_activity ++\r\n            break\r\n          case 'accountAndActivity':\r\n          default:\r\n            analysis._bots_account_and_activity ++\r\n        }\r\n      }\r\n    }\r\n\r\n    var classes = []\r\n    classes[analysis._real_total] = 'real'\r\n    classes[analysis._suspicious_total] = 'suspicious'\r\n    classes[analysis._bots_total] = 'bots'\r\n    analysis.classification = classes.pop()\r\n\r\n    // Set majority percentage\r\n    analysis.percentages.real = Math.round( ( analysis._real_total / analysis._total_analyzed ) * 100 )\r\n    analysis.percentages.suspicious = Math.round( ( analysis._suspicious_total / analysis._total_analyzed ) * 100 )\r\n    analysis.percentages.bots = Math.round( ( analysis._bots_total / analysis._total_analyzed ) * 100 )\r\n    analysis.majorityPercentage = analysis.percentages[analysis.classification]\r\n\r\n    var sum = 0, avg\r\n    for ( var z in realRetweeterFollowerCounts) sum += realRetweeterFollowerCounts[z]\r\n\r\n    avg = Math.round(sum / realRetweeterFollowerCounts.length)\r\n\r\n    // Generate estimates\r\n    analysis.estimates = {\r\n      realRetweeterAverageFollowerCount: avg,\r\n    }\r\n\r\n    return analysis\r\n  }\r\n\r\n  generateEstimatesViaAnalysis = function(analysis, userProbablityMatrix) {\r\n    analysis.estimates.actualFollowerCount = userProbablityMatrix.followedBy\r\n    analysis.estimates.estimatedFollowerCount = Math.round(userProbablityMatrix.followedBy * (analysis.percentages.real * .01))\r\n    if (analysis.counts) {\r\n      analysis.estimates.actualRetweetersCount = analysis.counts.retweets\r\n      analysis.estimates.actualRetweetersReach = analysis.counts.retweets * analysis.estimates.realRetweeterAverageFollowerCount\r\n      analysis.estimates.estimatedRetweetersCount = Math.round(analysis.counts.retweets * (analysis.percentages.real * .01))\r\n      analysis.estimates.estimatedRetweetersReach = analysis.estimates.estimatedRetweetersCount * analysis.estimates.realRetweeterAverageFollowerCount\r\n      analysis.estimates._actualQualityReachWithFakes = analysis.estimates.actualFollowerCount + analysis.estimates.actualRetweetersReach\r\n      analysis.estimates._estimatedQualityReach = analysis.estimates.estimatedFollowerCount + analysis.estimates.estimatedRetweetersReach\r\n    }\r\n    return analysis.estimates\r\n  }\r\n\r\n  render() {\r\n\r\n    const { recent } = this.props\r\n    const retweetersJSX = []\r\n    const analysis = this.analyzeRetweeters(recent.retweeters, recent.searchResult.tweet)\r\n    const estimates = this.generateEstimatesViaAnalysis(analysis, recent.searchResult.probabilityMatrix)\r\n    let totalLength = recent.retweeters.length\r\n    let realCount = 0, realRegularCount = 0, realInfluencerCount = 0, suspicious = 0, highRetweetRatio = 0, highFollowerRatio = 0, highThreatLevel = 0\r\n    let bots = 0, botsAccount = 0, botsActivity = 0, accountAndActivity = 0\r\n    for ( let i in recent.retweeters ) {\r\n      let linkClasses = ['avatar']\r\n      linkClasses.push(recent.retweeters[i].analysis.classification)\r\n      linkClasses.push(recent.retweeters[i].analysis.justification.slug)\r\n      retweetersJSX.push(\r\n        <a key={i} className=\"retweeter-link\" href={\"https://twitter.com/\" + recent.retweeters[i].screenName} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={recent.retweeters[i].profileImageUrl} title=\"\" className={linkClasses.join(' ')} alt=\"\" />\r\n        </a>\r\n      )\r\n      // Calculate percents of each category\r\n      if (recent.retweeters[i].analysis.classification === 'real') {\r\n        realCount++\r\n        if (recent.retweeters[i].analysis.justification.slug === 'regular') {\r\n          realRegularCount++\r\n        } else {\r\n          realInfluencerCount++\r\n        }\r\n      } else if (recent.retweeters[i].analysis.classification === 'suspicious') {\r\n        suspicious++\r\n        if (recent.retweeters[i].analysis.justification.slug === 'highRetweetRatio') {\r\n          highRetweetRatio++\r\n        } else if (recent.retweeters[i].analysis.justification.slug === 'highFollowerRatio') {\r\n          highFollowerRatio++\r\n        } else {\r\n          highThreatLevel++\r\n        }\r\n      } else { // Bots\r\n        bots++\r\n        if (recent.retweeters[i].analysis.justification.slug === 'account') {\r\n          botsAccount++\r\n        } else if (recent.retweeters[i].analysis.justification.slug === 'activity') {\r\n          botsActivity++\r\n        } else {\r\n          accountAndActivity++\r\n        }\r\n      }\r\n    }\r\n    let realPercent = parseInt(this.financial(realCount / totalLength * 100))\r\n    let suspiciousPercent = parseInt(this.financial(suspicious / totalLength * 100))\r\n    if ((realPercent + suspiciousPercent) > 100) {\r\n      suspiciousPercent = 100 - realPercent\r\n    }\r\n    let botsPercent = 100 - realPercent - suspiciousPercent\r\n    let reportText = null\r\n    if (realPercent >= 70) {\r\n      reportText = (\r\n        <div>\r\n          <p>{recent.searchResult.tweet.user.screenName}'s retweets on this tweet were mostly real, with {analysis.percentages.real}% real retweets, and has an impressive Quality Reach of {this.formatCount(analysis.estimates._estimatedQualityReach)} users.</p>\r\n          <p>Now, to be more detailed, here's what we did:<br />\r\n          We analyized {recent.searchResult.tweet.user.screenName}'s tweet from {recent.searchResult.tweet.date} to verify if his retweets were real or FAKE. When we last checked on {recent.searchResult.updatedAt.substr(0,10).replace(/-/g, '/')}, {recent.searchResult.tweet.user.screenName} had {recent.searchResult.tweet.counts.retweets} retweets, of which {analysis.percentages.real}% were real, or about {Math.floor(recent.searchResult.tweet.counts.retweets * analysis.percentages.real / 100)} retweets. We discovered only about {analysis.percentages.suspicious + analysis.percentages.bots}% of retweets where either suspecious or fake. This assessment is very good based on what we normally see.</p>\r\n          <p>In terms of exposure and reach, {recent.searchResult.tweet.user.screenName} tweet potentially reached both his and his real retweeter's active followers. We call this Quality Reach because we don't count users that won't see it, such as fake, inactive, and suspecious users. Our analysis of {recent.searchResult.tweet.user.screenName} followers determined that about {analysis.percentages.bots}% of their followers are fake or inactive, leaving about {analysis.estimates.actualFollowerCount} of real active followers. The {Math.floor(recent.searchResult.tweet.counts.retweets * analysis.percentages.real / 100)} real users that retweeted this tweet have approximately {analysis.estimates.realRetweeterAverageFollowerCount} followers each on average. So a bit a math gives us their Quality Reach of {this.formatCount(analysis.estimates._estimatedQualityReach)} users.</p>\r\n        </div>\r\n      )\r\n    } else if (realPercent >= 50) {\r\n      reportText = (\r\n        <div>\r\n          <p>{recent.searchResult.tweet.user.screenName}'s retweets on this tweet were only {analysis.percentages.real}% real, with {analysis.percentages.bots}% of retweets being fake and another {analysis.percentages.suspicious}% of retweets coming from suspecious users. With those figures, {recent.searchResult.tweet.user.screenName}'s tweet was able to Reach {this.formatCount(analysis.estimates._estimatedQualityReach)} real and active Twitter users.</p>\r\n          <p>To be more precises, here's how we came to our conclusions:<br />\r\n          We analyized {recent.searchResult.tweet.user.screenName}'s tweet from {recent.searchResult.tweet.date} to verify if his retweets were real or FAKE. When we last checked on {recent.searchResult.updatedAt.substr(0,10).replace(/-/g, '/')}, {recent.searchResult.tweet.user.screenName} had {recent.searchResult.tweet.counts.retweets} retweets, of which {analysis.percentages.real}% were real, or about {Math.floor(recent.searchResult.tweet.counts.retweets * analysis.percentages.real / 100)} retweets. We discovered that {analysis.percentages.suspicious + analysis.percentages.bots}% of retweets where either suspecious or fake. This assessment is definitely below average based on what we normally see, but it's not terrible.</p>\r\n          <p>In terms of exposure and reach, {recent.searchResult.tweet.user.screenName} tweet potentially reached both his and his real retweeter's active followers. We call this Quality Reach because we don't count users that won't see it, such as fake, inactive, and suspecious users. Our analysis of {recent.searchResult.tweet.user.screenName} followers determined that about {analysis.percentages.bots}% of their followers are fake or inactive, leaving about {analysis.estimates.actualFollowerCount} of real active followers. The {Math.floor(recent.searchResult.tweet.counts.retweets * analysis.percentages.real / 100)} real users that retweeted this tweet have approximately {analysis.estimates.realRetweeterAverageFollowerCount} followers each on average. After working out some math, the tweet had a Quality Reach of about {this.formatCount(analysis.estimates._estimatedQualityReach)} users.</p>\r\n        </div>\r\n      )\r\n    } else {\r\n      reportText = (\r\n        <div>\r\n          <p>{recent.searchResult.tweet.user.screenName}'s tweet had {recent.searchResult.tweet.counts.retweets} retweets, of which {analysis.percentages.bots + analysis.percentages.suspicious}% were fake or suspecious. There were only {analysis.percentages.real}% real retweets, which is well below-average. With about {Math.floor(recent.searchResult.tweet.counts.retweets * analysis.percentages.real / 100)} real retweets, {recent.searchResult.tweet.user.screenName}'s tweet was only able to Reach {this.formatCount(analysis.estimates._estimatedQualityReach)} real and active Twitter users.</p>\r\n          <p>To be more precises, here's how we came to our conclusions:<br />\r\n          We analyized {recent.searchResult.tweet.user.screenName}'s tweet from {recent.searchResult.tweet.date} to verify if his retweets were real or FAKE. When we last checked on {recent.searchResult.updatedAt.substr(0,10).replace(/-/g, '/')}, {recent.searchResult.tweet.user.screenName} had {recent.searchResult.tweet.counts.retweets} retweets, of which {analysis.percentages.real}% were real, or about {Math.floor(recent.searchResult.tweet.counts.retweets * analysis.percentages.real / 100)} retweets. We discovered that {analysis.percentages.suspicious + analysis.percentages.bots}% of retweets where either suspecious or fake, which is much higher than it should be. Our analysis revealed that MOST of the retweets were fake or from suspecious users, which may lead some to question if {recent.searchResult.tweet.user.screenName} bought fake retweets for this tweet, or could be getting spammed with fake retweets.</p>\r\n          <p>In terms of exposure and reach, we'd normally see a much bigger number than {this.formatCount(analysis.estimates._estimatedQualityReach)} Quality Reach, considering the tweet had {recent.searchResult.tweet.counts.retweets} retweets. However, with about {Math.floor(recent.searchResult.tweet.counts.retweets * (analysis.percentages.bots + analysis.percentages.suspicious) / 100)} being fake, inactive or suspecious, the number of users that would actually see their tweet is much lower. We calculated this by looking at both {recent.searchResult.tweet.user.name}'s real followers and the real retweets received. Our analysis of {recent.searchResult.tweet.user.screenName} followers determined that about {analysis.percentages.bots}% of their followers are fake or inactive, leaving about {analysis.estimates.actualFollowerCount} of real active followers. The {Math.floor(recent.searchResult.tweet.counts.retweets * analysis.percentages.real / 100)} real users that retweeted this tweet have an average of {analysis.estimates.realRetweeterAverageFollowerCount} followers each. Crunching those numbers, we see that the tweet has a {this.formatCount(analysis.estimates._estimatedQualityReach)} Quality Reach.</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"retweet-report row\">\r\n        <div className=\"retweeters-breakdown row\">\r\n          <div className=\"col span-5-of-12 col-capture-roof\">\r\n            <div className=\"capture-roof\">\r\n              <h3>Most Recent Retweeters</h3>\r\n              {retweetersJSX}\r\n            </div>\r\n          </div>\r\n          <div className=\"col span-3-of-12 col-retweeter-analysis\">\r\n            <div className=\"retweeter-analysis\">\r\n            <h3>Retweeter Analysis</h3>\r\n              <div className=\"real-people\">\r\n                <ul className=\"captures\">\r\n                  <li className=\"capture real\">\r\n                    <div className=\"text-left\">\r\n                      <p>Real People</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(realCount / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"capture real regular\">\r\n                    <div className=\"text-left\">\r\n                      <p>Regular Joes</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(realRegularCount / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"capture real influencer\">\r\n                    <div className=\"text-left\">\r\n                      <p>Influencers</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(realInfluencerCount / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"suspicious-users\">\r\n                <ul className=\"captures\">\r\n                  <li className=\"capture suspicious\">\r\n                    <div className=\"text-left\">\r\n                      <p>Suspicious<span className=\"hide-sm\"> Users</span></p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(suspicious / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"capture suspicious highRetweetRatio\">\r\n                    <div className=\"text-left\">\r\n                      <p>Mass Retweeters</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(highRetweetRatio / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"capture suspicious highFollowerRatio\">\r\n                    <div className=\"text-left\">\r\n                      <p>Mass Followers</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(highFollowerRatio / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li><li className=\"capture suspicious highThreatLevel\">\r\n                  <div className=\"text-left\">\r\n                    <p>Account / Activity</p>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <span>{this.financial(highThreatLevel / totalLength * 100)}%</span>\r\n                  </div>\r\n                </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"bots\">\r\n                <ul className=\"captures\">\r\n                  <li className=\"capture bots\">\r\n                    <div className=\"text-left\">\r\n                      <p>Bots</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(bots / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"capture bots account\">\r\n                    <div className=\"text-left\">\r\n                      <p>Account</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(botsAccount / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"capture bots activity\">\r\n                    <div className=\"text-left\">\r\n                      <p>Activity</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(botsActivity / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                  <li className=\"capture bots accountAndActivity\">\r\n                    <div className=\"text-left\">\r\n                      <p>Both</p>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <span>{this.financial(accountAndActivity / totalLength * 100)}%</span>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col span-4-of-12 col-doughnut\">\r\n            <DoughnutChart id={`tweet-${realPercent}-${suspiciousPercent}-${botsPercent}-report-chart`} real={ realPercent } suspicious={ suspiciousPercent } bots={ botsPercent } />\r\n          </div>\r\n        </div>\r\n        <div className=\"boxes\">\r\n          <div className=\"col box span-6-of-12\">\r\n            <div className=\"box-inner\">\r\n              <h3>Quality Reach</h3>\r\n              <span className=\"count\">{this.formatCount(estimates._estimatedQualityReach)}</span>\r\n              <p>Compared to {this.formatCount(estimates._actualQualityReachWithFakes)} reach including suspicious &amp; fake activity</p>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"col box span-4-of-12\">\r\n            <div className=\"box-inner\">\r\n              <h3>Retweeting Followers</h3>\r\n              <span className=\"count\">45%</span>\r\n              <p>Compared to 69% avg of all tweets checked</p>\r\n            </div>\r\n          </div> */}\r\n          <div className=\"col box last span-6-of-12\">\r\n            <div className=\"box-inner\">\r\n              <h3>Retweeting Likers</h3>\r\n              <span className=\"count\">60.2%</span>\r\n              <p>Compared to 45% avg of all tweets checked</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"message-copy\">\r\n          {reportText}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// export default Report\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loggedIn: state.auth.authenticated,\r\n    recent: state.recent\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Report)\r\n","import React, { Component } from 'react'\r\n\r\nclass TeaserBlock extends Component {\r\n\r\n  state = {\r\n    isSearching: true,\r\n    searchTerm: null\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"teaser-block row\">\r\n        <h1>See the full results</h1>\r\n        <p>Authenticate with Twitter to give us the POWER to check more in detail for you</p>\r\n        <h3>Totally free and anonymous check.</h3>\r\n        <a href=\"/login\">Run Full Analysis</a>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TeaserBlock\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport '../../scss/index.scss'\r\nimport '../../App.scss'\r\nimport '../../scss/queries.scss'\r\nimport Header from '../Header'\r\nimport Footer from '../Footer'\r\nimport Searchbar from '../Searchbar'\r\nimport RecentList from '../RecentList'\r\nimport Tweet from '../Tweet'\r\nimport Report from '../Report'\r\nimport TeaserBlock from '../TeaserBlock'\r\n\r\nclass Home extends Component {\r\n\r\n  share_fb = (e, tweetValue) => {\r\n    e.preventDefault()\r\n    let url = ''\r\n    url = \"https://www.facebook.com/sharer/sharer.php?u=https://twitter.com/\"\r\n    url += tweetValue.username\r\n    window.open(url, 'Facebook Share', \"width=626, height=436\")\r\n  }\r\n\r\n  share_twitter = (e, tweetValue) => {\r\n    e.preventDefault()\r\n    let url = ''\r\n    url += \"https://twitter.com/intent/tweet?text=I+just+checked+\"\r\n    url += tweetValue.name + \"%27s+tweet+on+RetweetChecker+and+the+account+appears+to+be+\"\r\n    url += tweetValue.adverb + \" \" + this.getAdjective(tweetValue.retweeters) + \". \"\r\n    url += \"https://twitter.com/\"\r\n    url += tweetValue.username\r\n    window.open(url, 'Twitter Share', \"width=626, height=436\")\r\n  }\r\n\r\n  financial = (x) => {\r\n    return Number.parseFloat(x).toFixed(0)\r\n  }\r\n\r\n  getAdjective = (retweeters) => {\r\n    let realCount = 0\r\n    let suspiciousCount = 0\r\n    for (let i in retweeters) {\r\n      if (retweeters[i].analysis.classification === 'real') {\r\n        realCount++\r\n      } else if (retweeters[i].analysis.classification === 'suspicious') {\r\n        suspiciousCount++\r\n      }\r\n    }\r\n    let realPercent = parseInt(this.financial(realCount / retweeters.length * 100))\r\n    let suspiciousPercent = parseInt(this.financial(suspiciousCount / retweeters.length * 100))\r\n    if ((realPercent + suspiciousPercent) > 100) {\r\n      suspiciousPercent = 100 - realPercent\r\n    }\r\n    let botsPercent = 100 - realPercent - suspiciousPercent\r\n    let adjective = ''\r\n    \r\n    // Define which percent is predominant. real or suspicious or bots ?\r\n    if (realPercent >= suspiciousPercent && realPercent >= botsPercent) {\r\n      adjective = 'real'\r\n    } else if (suspiciousPercent >= realPercent && suspiciousPercent >= botsPercent) {\r\n      adjective = 'suspicious'\r\n    } else {\r\n      adjective = 'bots'\r\n    }\r\n    return adjective\r\n  }\r\n\r\n  render() {\r\n    const { recent } = this.props\r\n    let searchResults = []\r\n    if( recent.tweetData ) {\r\n      const hasRecentRetweeters = recent.retweeters.length > 0\r\n      var keyValue = 1\r\n      recent.tweetData.forEach(tweetItem => {\r\n        searchResults.push(<Tweet\r\n          id={'tweet_' + keyValue}\r\n          key={'tweet_' + keyValue}\r\n          inRecent=\"no\"\r\n          { ... tweetItem }\r\n          expanded={hasRecentRetweeters}\r\n        />)\r\n        keyValue ++\r\n        searchResults.push(\r\n          <div className=\"toolbar\" id=\"483\" key=\"483\">\r\n            <span> 3.1k</span>\r\n            <a className=\"twitter\" href=\"/shareTwitter\" onClick={(e) => this.share_twitter(e, {...tweetItem})}><span></span></a>\r\n            <a className=\"facebook\" href=\"/shareTwitter\" onClick={(e) => this.share_fb(e, {...tweetItem})}><span></span></a>\r\n          </div>\r\n        )\r\n      })\r\n      if (hasRecentRetweeters) {\r\n        if(this.props.loggedIn) {\r\n          searchResults.push(<Report\r\n            id=\"482\"\r\n            key=\"482\"\r\n            { ... recent.reportData }\r\n          />)\r\n        } else {\r\n          searchResults.push(<TeaserBlock id=\"381\" key=\"381\" />);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <section className=\"App-body\">\r\n          <h1 className=\"main-title\">Check Fake Twitter Retweets</h1>\r\n          <Searchbar />\r\n          <div className=\"searchResults\">\r\n            {searchResults}\r\n          </div>\r\n          <RecentList />\r\n        </section>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n  return {\r\n    loggedIn: state.auth.authenticated,\r\n    recent: state.recent\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Home)\r\n","import React, { Component } from 'react'\r\nimport '../../scss/index.scss'\r\nimport '../../App.scss'\r\nimport '../../scss/queries.scss'\r\nimport Header from '../Header'\r\nimport Footer from '../Footer'\r\nimport Tweet from '../Tweet'\r\nimport Report from '../Report'\r\nimport TeaserBlock from '../TeaserBlock'\r\nimport Loader from '../Loader'\r\nimport { searchTwitter } from '../../actions/index'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nclass Status extends Component {\r\n\r\n  share_fb = (e, tweetValue) => {\r\n    e.preventDefault()\r\n    let url = ''\r\n    url = \"https://www.facebook.com/sharer/sharer.php?u=https://twitter.com/\"\r\n    url += tweetValue.username\r\n    window.open(url, 'Facebook Share', \"width=626, height=436\")\r\n  }\r\n\r\n  share_twitter = (e, tweetValue) => {\r\n    e.preventDefault()\r\n    let url = ''\r\n    url += \"https://twitter.com/intent/tweet?text=I+just+checked+\"\r\n    url += tweetValue.name + \"%27s+tweet+on+RetweetChecker+and+the+account+appears+to+be+\"\r\n    url += tweetValue.adverb + \" \" + this.getAdjective(tweetValue.retweeters) + \". \"\r\n    url += \"https://twitter.com/\"\r\n    url += tweetValue.username\r\n    window.open(url, 'Twitter Share', \"width=626, height=436\")\r\n  }\r\n\r\n  financial = (x) => {\r\n    return Number.parseFloat(x).toFixed(0)\r\n  }\r\n\r\n  getAdjective = (retweeters) => {\r\n    let realCount = 0\r\n    let suspiciousCount = 0\r\n    for (let i in retweeters) {\r\n      if (retweeters[i].analysis.classification === 'real') {\r\n        realCount++\r\n      } else if (retweeters[i].analysis.classification === 'suspicious') {\r\n        suspiciousCount++\r\n      }\r\n    }\r\n    let realPercent = parseInt(this.financial(realCount / retweeters.length * 100))\r\n    let suspiciousPercent = parseInt(this.financial(suspiciousCount / retweeters.length * 100))\r\n    if ((realPercent + suspiciousPercent) > 100) {\r\n      suspiciousPercent = 100 - realPercent\r\n    }\r\n    let botsPercent = 100 - realPercent - suspiciousPercent\r\n    let adjective = ''\r\n    \r\n    // Define which percent is predominant. real or suspicious or bots ?\r\n    if (realPercent >= suspiciousPercent && realPercent >= botsPercent) {\r\n      adjective = 'real'\r\n    } else if (suspiciousPercent >= realPercent && suspiciousPercent >= botsPercent) {\r\n      adjective = 'suspicious'\r\n    } else {\r\n      adjective = 'bots'\r\n    }\r\n    return adjective\r\n  }\r\n\r\n  state = {\r\n    isGetting: true\r\n  };\r\n  componentDidMount() {\r\n    let searchText = '/status/' + this.props.match.params.search\r\n    this.props.searchTwitter(searchText)\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ isGetting: false })\r\n  }\r\n\r\n  render() {\r\n    const { recent } = this.props\r\n    let searchResults = []\r\n    let loader = this.state.isGetting ? <Loader key=\"profileLoader\" /> : null\r\n    let noData = this.state.isGetting ? null : <div class=\"no-data\">There are no data for this status</div>\r\n    searchResults.push(loader)\r\n    if( recent.tweetData ) {\r\n      const hasRecentRetweeters = recent.retweeters.length > 0\r\n      var keyValue = 1\r\n      recent.tweetData.forEach(tweetItem => {\r\n        searchResults.push(<Tweet\r\n          id={'statustweet_' + keyValue}\r\n          key={'statustweet_' + keyValue}\r\n          { ...tweetItem }\r\n          expanded={hasRecentRetweeters}\r\n        />)\r\n        keyValue ++\r\n        searchResults.push(\r\n          <div className=\"toolbar\" id=\"483\" key=\"483\">\r\n            <span> 3.1k</span>\r\n            <a className=\"twitter\" href=\"/shareTwitter\" onClick={(e) => this.share_twitter(e, {...tweetItem})}><span></span></a>\r\n            <a className=\"facebook\" href=\"shareFacebook\" onClick={(e) => this.share_fb(e, {...tweetItem})}><span></span></a>\r\n          </div>\r\n        )\r\n      })\r\n      if (hasRecentRetweeters) {\r\n        if(this.props.loggedIn) {\r\n          searchResults.push(<Report\r\n            id=\"status_482\"\r\n            key=\"status_482\"\r\n            { ... recent.reportData }\r\n          />)\r\n        } else {\r\n          searchResults.push(<TeaserBlock id=\"381\" key=\"381\" />)\r\n        }\r\n      }\r\n    } else {\r\n      searchResults.push(noData)\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"App\">\r\n          <section className=\"App-body\">\r\n              <div className=\"profile-section searchResults\">\r\n                {searchResults}\r\n              </div>\r\n          </section>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n  return {\r\n    loggedIn: state.auth.authenticated,\r\n    recent: state.recent\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { searchTwitter })(Status)\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Route } from 'react-router-dom'\r\nimport {signinUser} from '../../actions'\r\n\r\nclass Login extends Component {\r\n    componentDidMount(){\r\n        this.props.signinUser()\r\n    }\r\n    render() {\r\n        return <div style={{color:\"#fff\"}}>\r\n            {this.props.redirect?<Route path='/login' component={() => window.location = this.props.redirect}/>:null}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        redirect: state.auth.redirect\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signinUser: () => dispatch(signinUser())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\r\n","import React, { Component } from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { signCallbackHandling } from '../../actions/'\r\nimport {connect} from 'react-redux'\r\n\r\nclass Login extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            redirect: false\r\n        }\r\n    }\r\n    componentWillMount(){\r\n        const tokens  = this.props.location.search\r\n        this.props.signCallbackHandling(tokens)\r\n    }\r\n    render() {\r\n        return <div>\r\n            {<Redirect to=\"/\"/>}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signCallbackHandling: tokens => dispatch(signCallbackHandling(tokens))\r\n})\r\n\r\nexport default connect(null,mapDispatchToProps)(Login)\r\n","import React, { Component } from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { signoutUser } from '../../actions'\r\nimport {connect} from 'react-redux'\r\n\r\nclass Logout extends Component {\r\n    componentWillMount(){\r\n        this.props.signoutUser()\r\n    }\r\n    render() {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    signoutUser: id => dispatch(signoutUser())\r\n})\r\n\r\nexport default connect(null,mapDispatchToProps)(Logout)\r\n","import React, { Component } from 'react'\r\nimport '../../scss/index.scss'\r\nimport '../../App.scss'\r\nimport '../../scss/queries.scss'\r\nimport Header from '../Header'\r\nimport Footer from '../Footer'\r\n\r\nclass About extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <section className=\"App-body\">\r\n          <h1 className=\"main-title\">About Twitterchecker</h1>\r\n          <p>This is about page.</p>\r\n        </section>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\r\nimport '../../scss/index.scss'\r\nimport '../../App.scss'\r\nimport '../../scss/queries.scss'\r\nimport Header from '../Header'\r\nimport Footer from '../Footer'\r\n\r\nclass Contact extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <section className=\"App-body\">\r\n          <h1 className=\"main-title\">Contact</h1>\r\n          <p>This is contact page.</p>\r\n        </section>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchSitemap } from '../../actions/index'\r\n\r\nimport '../../scss/index.scss'\r\nimport '../../App.scss'\r\nimport '../../scss/queries.scss'\r\n\r\nclass Sitemap extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      isSearching: true\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.props.fetchSitemap()\r\n  }\r\n  componentWillReceiveProps (nextProps) {\r\n    this.setState({isSearching: false})\r\n  }\r\n\r\n  render() {\r\n    let sitemapText = this.props.sitemap.sitemap\r\n    return (\r\n      <section className=\"App-body\">\r\n        { sitemapText }\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { sitemap: state.sitemap }\r\n}\r\nexport default connect(mapStateToProps, { fetchSitemap })(Sitemap)\r\n","import {\r\n  FETCH_RECENT,\r\n  FETCH_SEARCH,\r\n  REFRESH_TWEET\r\n} from '../actions/types'\r\n\r\nconst initState = {\r\n  recentList: [],\r\n  tweetData: null,\r\n  reportData: null,\r\n  retweeters: [],\r\n  loading: null\r\n}\r\n\r\nexport default function(state = initState, action) {\r\n  switch(action.type) {\r\n    case FETCH_RECENT: {\r\n      const { payload } = action\r\n      return {\r\n        ...state,\r\n        loading: 'FETCH_RECENT',\r\n        recentList: payload\r\n      }\r\n    }\r\n    case FETCH_SEARCH: {\r\n      if(action.payload.error) {\r\n        return { error: action.payload.error }\r\n      } else {\r\n        const { data, type, checkType, addedRecent } = action.payload\r\n        let { recentList } = state\r\n        let newRecentList = []\r\n        let tweetData = []\r\n        if (Array.isArray(data)) {\r\n          data.forEach(item => {\r\n            let tempRecent = {\r\n              showFull: checkType==='full'?true:false,\r\n              name: item.tweet.user.name,\r\n              username: item.tweet.user.screenName,\r\n              avatar: item.tweet.user.profileImageUrl,\r\n              tweetDate: item.tweet.date,\r\n              searchDate: changeDateFormat(item.updatedAt),\r\n              content: item.tweet.content,\r\n              countRetweets: item.tweet.counts.retweets,\r\n              countLikes: item.tweet.counts.likes,\r\n              adverb: 'mostly',\r\n              adjective: item.probabilityMatrix.analysis.classification,\r\n              retweetId: item.tweet.id,\r\n              retweeters: item.retweeters,\r\n              type: 'user'\r\n            }\r\n            newRecentList.push(tempRecent)\r\n            tweetData.push(tempRecent)\r\n          })\r\n\r\n        } else {\r\n          let newRecent = {}\r\n          if (type === 'user') {\r\n            newRecent = {\r\n              showFull: checkType === 'full' ? true : false,\r\n              name: data.tweet.user.name,\r\n              username: data.tweet.user.screenName,\r\n              avatar: data.tweet.user.profileImageUrl,\r\n              tweetDate: data.tweet.date,\r\n              searchDate: changeDateFormat(data.updatedAt),\r\n              content: data.tweet.content,\r\n              countRetweets: data.tweet.counts.retweets,\r\n              countLikes: data.tweet.counts.likes,\r\n              adverb: 'mostly',\r\n              adjective: data.probabilityMatrix.analysis.classification,\r\n              retweetId: data.tweet.id,\r\n              retweeters: data.retweeters,\r\n              type: 'user'\r\n            }\r\n          } else {\r\n            newRecent = {\r\n              showFull: checkType === 'full' ? true : false,\r\n              name: data.tweet.user.name,\r\n              username: data.tweet.user.screenName,\r\n              avatar: data.tweet.user.profileImageUrl,\r\n              tweetDate: data.tweet.date,\r\n              searchDate: changeDateFormat(data.updatedAt),\r\n              content: data.tweet.content,\r\n              countRetweets: data.tweet.counts.retweets,\r\n              countLikes: data.tweet.counts.likes,\r\n              adverb: 'mostly',\r\n              adjective: '',\r\n              retweetId: data.tweet.id,\r\n              retweeters: data.retweeters,\r\n              type: 'tweet'\r\n            }\r\n          }\r\n          if (addedRecent && newRecent.showFull) {\r\n            newRecentList.push(newRecent)\r\n          }\r\n          tweetData.push(newRecent)\r\n        }\r\n\r\n        return {\r\n          ...state,\r\n          loading: 'FETCH_SEARCH',\r\n          searchType: type,\r\n          searchResult: data,\r\n          recentList: [\r\n            ...newRecentList,\r\n            ...recentList\r\n          ],\r\n          tweetData: tweetData,\r\n          retweeters: data.retweeters,\r\n          reportData: {}\r\n        }\r\n      }\r\n    }\r\n    case REFRESH_TWEET: {\r\n      const { data, checkType } = action.payload\r\n      let { recentList } = state\r\n      for (let i in recentList) {\r\n        if (recentList[i].retweetId === data.tweet.id) {\r\n          recentList[i] = {\r\n            showFull: checkType==='full'?true:false,\r\n            name: data.tweet.user.name,\r\n            username: data.tweet.user.screenName,\r\n            avatar: data.tweet.user.profileImageUrl,\r\n            tweetDate: data.tweet.date,\r\n            searchDate: changeDateFormat(data.updatedAt),\r\n            content: data.tweet.content,\r\n            countRetweets: data.tweet.counts.retweets,\r\n            countLikes: data.tweet.counts.likes,\r\n            adverb: 'mostly',\r\n            adjective: '',\r\n            retweetId: data.tweet.id,\r\n            retweeters: data.retweeters,\r\n            type: 'tweet'\r\n          }\r\n        }\r\n      }\r\n        \r\n      return {\r\n        ...state,\r\n        loading: 'REFRESH_TWEET',\r\n        recentList: recentList\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction changeDateFormat(dateTimeString) {\r\n  let originalDateTime = new Date(dateTimeString);\r\n  const splitDateTimeString = originalDateTime.toLocaleString('en-US').toLowerCase().split(', ');\r\n  const splitTimeString = splitDateTimeString[1].split(' ');\r\n  return splitDateTimeString[0] + ' @ ' + splitTimeString[0].substr(0, 5) + ' ' + splitTimeString[1];\r\n}","import {\r\n  REFRESH_TWEET\r\n} from '../actions/types'\r\n\r\nconst initState = {\r\n  tweetData: null,\r\n  retweeters: []\r\n}\r\n\r\nexport default function(state = initState, action) {\r\n  // Attention!!! The state object here refers to state.comments, instead of the application state.\r\n\r\n  switch(action.type) {\r\n    case REFRESH_TWEET: {\r\n      const { data, checkType } = action.payload\r\n      let newRecent = {\r\n        showFull: checkType==='full'?true:false,\r\n        name: data.tweet.user.name,\r\n        username: data.tweet.user.screenName,\r\n        avatar: data.tweet.user.profileImageUrl,\r\n        tweetDate: data.tweet.date,\r\n        searchDate: changeDateFormat(data.updatedAt),\r\n        content: data.tweet.content,\r\n        countRetweets: data.tweet.counts.retweets,\r\n        countLikes: data.tweet.counts.likes,\r\n        adverb: 'mostly',\r\n        adjective: '',\r\n        retweetId: data.tweet.id,\r\n        retweeters: data.retweeters,\r\n        type: 'tweet'\r\n      }\r\n        \r\n      return {\r\n        ...state,\r\n        loading: 'REFRESH_TWEET',\r\n        tweetData: newRecent,\r\n        retweeters: data.retweeters\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction changeDateFormat(dateString) {\r\n  let originalDate = new Date(dateString)\r\n  return originalDate.toLocaleString('en-US').toLowerCase()\r\n}","import {\r\n  FETCH_SITEMAP\r\n} from '../actions/types'\r\n\r\nconst initState = {\r\n  sitemap: null\r\n}\r\n\r\nexport default function(state=initState, action) {\r\n  switch(action.type) {\r\n    case FETCH_SITEMAP:\r\n      return { ...state, sitemap: action.payload.sitemap }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nimport authReducer from './auth_reducer'\r\nimport profileReducer from './profile_reducer'\r\nimport recentReducer from './recent_reducer'\r\nimport retweetsReducer from './retweets_reducer'\r\nimport sitemapReducer from './sitemap_reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    auth: authReducer,\r\n    profile: profileReducer,\r\n    recent: recentReducer,\r\n    retweets: retweetsReducer,\r\n    sitemap: sitemapReducer,\r\n})\r\n\r\nexport default rootReducer","import {\r\n  AUTH_USER,\r\n  UNAUTH_USER,\r\n  REDIRECT_USER\r\n} from '../actions/types'\r\n\r\nexport default function(state = {}, action) {\r\n  // Attention!!! The state object here refers to state.auth, instead of the application state.\r\n\r\n  switch(action.type) {\r\n    case AUTH_USER:\r\n      return { ...state, authenticated: true, username: action.payload.username, image:  action.payload.image, redirect: false }\r\n    case UNAUTH_USER:\r\n      return { ...state, authenticated: false, username: '', redirect: false }\r\n    case REDIRECT_USER:\r\n      return { ...state, redirect: action.payload }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}","import {\r\n  FETCH_PROFILE\r\n} from '../actions/types'\r\n\r\nexport default function(state={}, action) {\r\n  switch(action.type) {\r\n    case FETCH_PROFILE:\r\n      return { ...state, user: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport reduxThunk from 'redux-thunk'\r\n\r\nimport Home from './components/Home'\r\n// import Profile from './components/Profile';\r\nimport Status from './components/Status'\r\nimport Login from './components/Login'\r\nimport LoginCallback from './components/Login/loginCallback'\r\nimport Logout from './components/Logout'\r\nimport About from './components/About'\r\nimport Contact from './components/Contact'\r\nimport Sitemap from './components/Sitemap'\r\n\r\nimport reducers from './reducers'\r\nimport { AUTH_USER } from './actions/types'\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore)\r\nconst store = createStoreWithMiddleware(reducers)\r\n\r\nconst token = localStorage.getItem('rtc-token')\r\nconst username = localStorage.getItem('user_name')\r\nconst image = localStorage.getItem('user_avatar')\r\n// If we have a token, consider the user to be signed in\r\nif (token) {\r\n  // We need to update application state\r\n  store.dispatch({ type: AUTH_USER, payload:{username,image} })\r\n}\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route exact path='/login' component={Login} />\r\n          <Route exact path='/login/callback' component={LoginCallback} />\r\n          <Route exact path='/logout' component={Logout} />\r\n          <Route exact path='/about' component={About} />\r\n          <Route exact path='/contact' component={Contact} />\r\n          <Route exact path='/sitemap.xml' component={Sitemap} />\r\n          {/*<Route path=\"/profile/:search\" component={Profile} />*/}\r\n          <Route path=\"/status/:search\" component={Status} />\r\n          <Route path=\"**\" component={Home} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  </Provider>\r\n  , document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}